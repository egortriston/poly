class AdminChat {
    constructor() {
        this.messages = [];
        this.stats = {};
        this.currentMessage = null;
        this.currentFilter = null; // –¢–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä
        this.init();
    }

    async init() {
        await this.loadStats();
        await this.loadMessages();
        this.setupEventListeners();
        this.startAutoRefresh();
    }

    async loadStats() {
        try {
            const response = await fetch('/api/messages/moderation/stats');
            if (response.status === 401) {
                // –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
                window.location.href = '/admin-login';
                return;
            }
            this.stats = await response.json();
            this.updateStatsDisplay();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
    }

    async loadMessages() {
        try {
            const response = await fetch('/api/messages/moderation/pending');
            if (response.status === 401) {
                // –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
                window.location.href = '/admin-login';
                return;
            }
            this.messages = await response.json();
            this.renderMessages();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        }
    }

    updateStatsDisplay() {
        const statsContainer = document.getElementById('moderation-stats');
        if (statsContainer) {
            statsContainer.innerHTML = `
                <div class="stat-item" data-filter="material" onclick="adminChat.filterByType('material')">
                    <span class="stat-number pending">${this.stats.materials || 0}</span>
                    <span class="stat-label">–ú–∞—Ç–µ—Ä–∏–∞–ª—ã</span>
                </div>
                <div class="stat-item" data-filter="news" onclick="adminChat.filterByType('news')">
                    <span class="stat-number approved">${this.stats.news || 0}</span>
                    <span class="stat-label">–ù–æ–≤–æ—Å—Ç–∏</span>
                </div>
                <div class="stat-item" data-filter="event" onclick="adminChat.filterByType('event')">
                    <span class="stat-number rejected">${this.stats.events || 0}</span>
                    <span class="stat-label">–°–æ–±—ã—Ç–∏—è</span>
                </div>
                <div class="stat-item" data-filter="program" onclick="adminChat.filterByType('program')">
                    <span class="stat-number">${this.stats.programs || 0}</span>
                    <span class="stat-label">–ü—Ä–æ–≥—Ä–∞–º–º—ã</span>
                </div>
            `;
        }
    }

    renderMessages() {
        const messagesContainer = document.getElementById('moderation-list');
        if (!messagesContainer) return;

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        let filteredMessages = this.messages;
        if (this.currentFilter) {
            filteredMessages = this.messages.filter(message => message.content_type === this.currentFilter);
        }

        if (filteredMessages.length === 0) {
            const filterText = this.currentFilter ? ` –¥–ª—è —Ç–∏–ø–∞ "${this.getContentTypeLabel(this.currentFilter)}"` : '';
            messagesContainer.innerHTML = `<div class="empty-state">–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏${filterText}</div>`;
            return;
        }

        messagesContainer.innerHTML = filteredMessages.map(message => `
            <div class="moderation-item" data-message-id="${message.id_message}">
                <div class="moderation-header">
                    <div class="moderation-info">
                        <div class="content-type">${this.getContentTypeLabel(message.content_type)}</div>
                        <div class="user-info">
                            <span class="user-name">${message.user_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</span>
                            <span class="message-time">${this.formatTime(message.message_time)}</span>
                        </div>
                    </div>
                    <div class="content-id">ID: ${message.content_id}</div>
                </div>
                
                <div class="moderation-content">
                    <div class="message-text">${message.message_text}</div>
                </div>

                <div class="moderation-actions">
                    <button class="btn-approve" onclick="adminChat.approveContent(${message.id_message})">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                            <path d="M20 6L9 17L4 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                        –û–¥–æ–±—Ä–∏—Ç—å
                    </button>
                    <button class="btn-reject" onclick="adminChat.rejectContent(${message.id_message})">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                            <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                        –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                    </button>
                    <button class="btn-view" onclick="adminChat.viewContent('${message.content_type}', ${message.content_id})">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                            <path d="M1 12S5 4 12 4S23 12 23 12S19 20 12 20S1 12 1 12Z" stroke="currentColor" stroke-width="2"/>
                            <circle cx="12" cy="12" r="3" stroke="currentColor" stroke-width="2"/>
                        </svg>
                        –ü—Ä–æ—Å–º–æ—Ç—Ä
                    </button>
                </div>
            </div>
        `).join('');
    }

    getContentTypeLabel(contentType) {
        const labels = {
            'material': 'üìö –ú–∞—Ç–µ—Ä–∏–∞–ª',
            'news': 'üì∞ –ù–æ–≤–æ—Å—Ç—å',
            'event': 'üìÖ –°–æ–±—ã—Ç–∏–µ',
            'program': 'üéì –ü—Ä–æ–≥—Ä–∞–º–º–∞'
        };
        return labels[contentType] || contentType;
    }

    formatTime(timeString) {
        if (!timeString) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        const date = new Date(`2000-01-01T${timeString}`);
        return date.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    async approveContent(messageId) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–¥–æ–±—Ä–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç?')) {
            return;
        }
        
        try {
            const response = await fetch('/api/messages/moderation/approve', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    message_id: messageId
                })
            });

            if (response.status === 401) {
                // –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
                window.location.href = '/admin-login';
                return;
            }

            if (response.ok) {
                alert('–ö–æ–Ω—Ç–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω!');
                await this.loadStats();
                await this.loadMessages();
            } else {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
        }
    }

    async rejectContent(messageId) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç?')) {
            return;
        }

        try {
            const response = await fetch('/api/messages/moderation/reject', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    message_id: messageId
                })
            });

            if (response.status === 401) {
                // –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
                window.location.href = '/admin-login';
                return;
            }

            if (response.ok) {
                alert('–ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω!');
                await this.loadStats();
                await this.loadMessages();
            } else {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
        }
    }

    async viewContent(contentType, contentId) {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            let contentData = null;
            let filesData = null;
            
            switch (contentType) {
                case 'material':
                    const materialResponse = await fetch(`/api/materials/${contentId}`);
                    if (materialResponse.status === 401) {
                        window.location.href = '/admin-login';
                        return;
                    }
                    if (materialResponse.ok) {
                        contentData = await materialResponse.json();
                    }
                    const materialFilesResponse = await fetch(`/api/materials/${contentId}/files`);
                    if (materialFilesResponse.status === 401) {
                        window.location.href = '/admin-login';
                        return;
                    }
                    if (materialFilesResponse.ok) {
                        filesData = await materialFilesResponse.json();
                    }
                    break;
                case 'news':
                    const newsResponse = await fetch(`/api/news/${contentId}`);
                    if (newsResponse.status === 401) {
                        window.location.href = '/admin-login';
                        return;
                    }
                    if (newsResponse.ok) {
                        contentData = await newsResponse.json();
                    }
                    const newsFilesResponse = await fetch(`/api/news/${contentId}/files`);
                    if (newsFilesResponse.status === 401) {
                        window.location.href = '/admin-login';
                        return;
                    }
                    if (newsFilesResponse.ok) {
                        filesData = await newsFilesResponse.json();
                    }
                    break;
                case 'event':
                    const eventResponse = await fetch(`/api/events/${contentId}`);
                    if (eventResponse.status === 401) {
                        window.location.href = '/admin-login';
                        return;
                    }
                    if (eventResponse.ok) {
                        contentData = await eventResponse.json();
                    }
                    const eventFilesResponse = await fetch(`/api/events/${contentId}/files`);
                    if (eventFilesResponse.status === 401) {
                        window.location.href = '/admin-login';
                        return;
                    }
                    if (eventFilesResponse.ok) {
                        filesData = await eventFilesResponse.json();
                    }
                    break;
                case 'program':
                    const programResponse = await fetch(`/api/programs/${contentId}`);
                    if (programResponse.status === 401) {
                        window.location.href = '/admin-login';
                        return;
                    }
                    if (programResponse.ok) {
                        contentData = await programResponse.json();
                    }
                    const programFilesResponse = await fetch(`/api/programs/${contentId}/files`);
                    if (programFilesResponse.status === 401) {
                        window.location.href = '/admin-login';
                        return;
                    }
                    if (programFilesResponse.ok) {
                        filesData = await programFilesResponse.json();
                    }
                    break;
            }
            
            this.showContentModal(contentType, contentData, filesData);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
        }
    }

    showContentModal(contentType, contentData, filesData) {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'content-modal-overlay';
        modal.innerHTML = `
            <div class="content-modal">
                <div class="modal-header">
                    <h2>${this.getContentTypeLabel(contentType)}</h2>
                    <button class="modal-close" onclick="this.closest('.content-modal-overlay').remove()">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                            <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                    </button>
                </div>
                <div class="modal-content">
                    ${this.renderContentDetails(contentType, contentData, filesData)}
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.remove();
            }
        });
    }

    renderContentDetails(contentType, contentData, filesData) {
        if (!contentData) {
            return '<div class="error-message">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</div>';
        }

        let contentHtml = '';
        
        switch (contentType) {
            case 'material':
                contentHtml = this.renderMaterialDetails(contentData, filesData);
                break;
            case 'news':
                contentHtml = this.renderNewsDetails(contentData, filesData);
                break;
            case 'event':
                contentHtml = this.renderEventDetails(contentData, filesData);
                break;
            case 'program':
                contentHtml = this.renderProgramDetails(contentData, filesData);
                break;
        }
        
        return contentHtml;
    }

    renderMaterialDetails(material, filesData) {
        return `
            <div class="content-details">
                <div class="content-header">
                    <h3>${material.material_name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h3>
                    <div class="content-meta">
                        <span class="meta-item">–ê–≤—Ç–æ—Ä: ${material.material_author || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                        <span class="meta-item">–¢–∏–ø: ${material.material_type || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                        <span class="meta-item">–ò–Ω—Å—Ç–∏—Ç—É—Ç: ${material.material_school || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                        <span class="meta-item">–°—Ç–∞—Ç—É—Å: <span class="status-badge ${material.material_status}">${material.material_status || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span></span>
                    </div>
                </div>
                
                <div class="content-body">
                    <div class="content-description">
                        <h4>–û–ø–∏—Å–∞–Ω–∏–µ:</h4>
                        <p>${material.material_description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
                    </div>
                    
                    ${material.material_full_description ? `
                        <div class="content-full-description">
                            <h4>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</h4>
                            <p>${material.material_full_description}</p>
                        </div>
                    ` : ''}
                    
                    ${material.material_tags ? `
                        <div class="content-tags">
                            <h4>–¢–µ–≥–∏:</h4>
                            <div class="tags-list">
                                ${material.material_tags.split(',').map(tag => `<span class="tag">${tag.trim()}</span>`).join('')}
                            </div>
                        </div>
                    ` : ''}
                    
                    ${material.material_link ? `
                        <div class="content-link">
                            <h4>–°—Å—ã–ª–∫–∞:</h4>
                            <a href="${material.material_link}" target="_blank" class="external-link">${material.material_link}</a>
                        </div>
                    ` : ''}
                </div>
                
                ${material.material_image ? `
                    <div class="content-image">
                        <h4>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</h4>
                        <img src="/api/materials/${material.id_material}/image" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞" class="content-img">
                        <button class="download-btn" onclick="adminChat.downloadImage('/api/materials/${material.id_material}/image', 'material_${material.id_material}.png')">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                                <path d="M21 15V19A2 2 0 0 1 19 21H5A2 2 0 0 1 3 19V15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                <polyline points="7,10 12,15 17,10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                <line x1="12" y1="15" x2="12" y2="3" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                            –°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        </button>
                    </div>
                ` : ''}
                
                ${filesData && filesData.length > 0 ? `
                    <div class="content-files">
                        <h4>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</h4>
                        <div class="files-list">
                            ${filesData.map((file, index) => `
                                <div class="file-item">
                                    <span class="file-name">–§–∞–π–ª ${index + 1}</span>
                                    <button class="download-btn" onclick="adminChat.downloadFile('/api/materials/${material.id_material}/files/${file.id_file_material}', 'material_file_${file.id_file_material}')">
                                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                                            <path d="M21 15V19A2 2 0 0 1 19 21H5A2 2 0 0 1 3 19V15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                            <polyline points="7,10 12,15 17,10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                            <line x1="12" y1="15" x2="12" y2="3" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                        </svg>
                                        –°–∫–∞—á–∞—Ç—å
                                    </button>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                ` : ''}
            </div>
        `;
    }

    renderNewsDetails(news, filesData) {
        return `
            <div class="content-details">
                <div class="content-header">
                    <h3>${news.name_news || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h3>
                    <div class="content-meta">
                        <span class="meta-item">–ê–≤—Ç–æ—Ä: ${news.news_author || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                        <span class="meta-item">–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${news.news_category || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</span>
                        <span class="meta-item">–°—Ç–∞—Ç—É—Å: <span class="status-badge ${news.news_status}">${news.news_status || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span></span>
                    </div>
                </div>
                
                <div class="content-body">
                    <div class="content-description">
                        <h4>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</h4>
                        <p>${news.news_text || '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
                    </div>
                    
                    ${news.news_link ? `
                        <div class="content-link">
                            <h4>–°—Å—ã–ª–∫–∞:</h4>
                            <a href="${news.news_link}" target="_blank" class="external-link">${news.news_link}</a>
                        </div>
                    ` : ''}
                </div>
                
                ${news.news_image ? `
                    <div class="content-image">
                        <h4>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</h4>
                        <img src="/api/news/${news.id_news}/image" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏" class="content-img">
                        <button class="download-btn" onclick="adminChat.downloadImage('/api/news/${news.id_news}/image', 'news_${news.id_news}.png')">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                                <path d="M21 15V19A2 2 0 0 1 19 21H5A2 2 0 0 1 3 19V15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                <polyline points="7,10 12,15 17,10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                <line x1="12" y1="15" x2="12" y2="3" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                            –°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        </button>
                    </div>
                ` : ''}
                
                ${filesData && filesData.length > 0 ? `
                    <div class="content-files">
                        <h4>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</h4>
                        <div class="files-list">
                            ${filesData.map((file, index) => `
                                <div class="file-item">
                                    <span class="file-name">–§–∞–π–ª ${index + 1}</span>
                                    <button class="download-btn" onclick="adminChat.downloadFile('/api/news/${news.id_news}/files/${file.id_news_file}', 'news_file_${file.id_news_file}')">
                                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                                            <path d="M21 15V19A2 2 0 0 1 19 21H5A2 2 0 0 1 3 19V15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                            <polyline points="7,10 12,15 17,10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                            <line x1="12" y1="15" x2="12" y2="3" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                        </svg>
                                        –°–∫–∞—á–∞—Ç—å
                                    </button>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                ` : ''}
            </div>
        `;
    }

    renderEventDetails(event, filesData) {
        return `
            <div class="content-details">
                <div class="content-header">
                    <h3>${event.event_name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h3>
                    <div class="content-meta">
                        <span class="meta-item">–¢–∏–ø: ${event.event_type || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                        <span class="meta-item">–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${event.event_category || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</span>
                        <span class="meta-item">–°—Ç–∞—Ç—É—Å: <span class="status-badge ${event.event_status}">${event.event_status || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span></span>
                    </div>
                </div>
                
                <div class="content-body">
                    <div class="content-description">
                        <h4>–û–ø–∏—Å–∞–Ω–∏–µ:</h4>
                        <p>${event.event_description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
                    </div>
                    
                    <div class="event-dates">
                        <h4>–î–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</h4>
                        <p>–° ${event.start || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} –ø–æ ${event.end || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                        ${event.time_start ? `<p>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${event.time_start}</p>` : ''}
                    </div>
                    
                    ${event.event_audience ? `
                        <div class="event-audience">
                            <h4>–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:</h4>
                            <p>${event.event_audience}</p>
                        </div>
                    ` : ''}
                    
                    ${event.event_info ? `
                        <div class="event-info">
                            <h4>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h4>
                            <p>${event.event_info}</p>
                        </div>
                    ` : ''}
                </div>
                
                ${filesData && filesData.length > 0 ? `
                    <div class="content-files">
                        <h4>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</h4>
                        <div class="files-list">
                            ${filesData.map((file, index) => `
                                <div class="file-item">
                                    <span class="file-name">–§–∞–π–ª ${index + 1}</span>
                                    <button class="download-btn" onclick="adminChat.downloadFile('/api/events/${event.id_event}/files/${file.id_event_file}', 'event_file_${file.id_event_file}')">
                                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                                            <path d="M21 15V19A2 2 0 0 1 19 21H5A2 2 0 0 1 3 19V15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                            <polyline points="7,10 12,15 17,10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                            <line x1="12" y1="15" x2="12" y2="3" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                        </svg>
                                        –°–∫–∞—á–∞—Ç—å
                                    </button>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                ` : ''}
            </div>
        `;
    }

    renderProgramDetails(program, filesData) {
        return `
            <div class="content-details">
                <div class="content-header">
                    <h3>${program.program_name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h3>
                    <div class="content-meta">
                        <span class="meta-item">–¢–∏–ø: ${program.program_type || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                        <span class="meta-item">–°—Ç–∞—Ç—É—Å: <span class="status-badge ${program.program_status}">${program.program_status || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span></span>
                    </div>
                </div>
                
                <div class="content-body">
                    <div class="content-description">
                        <h4>–û–ø–∏—Å–∞–Ω–∏–µ:</h4>
                        <p>${program.program_description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
                    </div>
                    
                    ${program.program_info ? `
                        <div class="program-info">
                            <h4>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h4>
                            <p>${program.program_info}</p>
                        </div>
                    ` : ''}
                    
                    ${program.program_link ? `
                        <div class="content-link">
                            <h4>–°—Å—ã–ª–∫–∞:</h4>
                            <a href="${program.program_link}" target="_blank" class="external-link">${program.program_link}</a>
                        </div>
                    ` : ''}
                </div>
                
                ${program.program_image ? `
                    <div class="content-image">
                        <h4>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</h4>
                        <img src="/api/programs/${program.id_program}/image" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã" class="content-img">
                        <button class="download-btn" onclick="adminChat.downloadImage('/api/programs/${program.id_program}/image', 'program_${program.id_program}.png')">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                                <path d="M21 15V19A2 2 0 0 1 19 21H5A2 2 0 0 1 3 19V15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                <polyline points="7,10 12,15 17,10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                <line x1="12" y1="15" x2="12" y2="3" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                            –°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        </button>
                    </div>
                ` : ''}
                
                ${filesData && filesData.length > 0 ? `
                    <div class="content-files">
                        <h4>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</h4>
                        <div class="files-list">
                            ${filesData.map((file, index) => `
                                <div class="file-item">
                                    <span class="file-name">–§–∞–π–ª ${index + 1}</span>
                                    <button class="download-btn" onclick="adminChat.downloadFile('/api/programs/${program.id_program}/files/${file.id_program_file}', 'program_file_${file.id_program_file}')">
                                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                                            <path d="M21 15V19A2 2 0 0 1 19 21H5A2 2 0 0 1 3 19V15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                            <polyline points="7,10 12,15 17,10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                            <line x1="12" y1="15" x2="12" y2="3" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                        </svg>
                                        –°–∫–∞—á–∞—Ç—å
                                    </button>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                ` : ''}
            </div>
        `;
    }

    async downloadImage(imageUrl, filename) {
        try {
            const response = await fetch(imageUrl);
            if (response.ok) {
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = filename;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
            } else {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        }
    }

    async downloadFile(fileUrl, filename) {
        try {
            const response = await fetch(fileUrl);
            if (response.ok) {
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = filename;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
            } else {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞');
        }
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    filterByType(contentType) {
        // –ï—Å–ª–∏ –∫–ª–∏–∫–∞–µ–º –Ω–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
        if (this.currentFilter === contentType) {
            this.clearFilter();
            return;
        }

        this.currentFilter = contentType;
        this.updateFilterDisplay();
        this.renderMessages();
    }

    // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞
    clearFilter() {
        this.currentFilter = null;
        this.updateFilterDisplay();
        this.renderMessages();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
    updateFilterDisplay() {
        const statsContainer = document.getElementById('moderation-stats');
        if (!statsContainer) return;

        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const statItems = statsContainer.querySelectorAll('.stat-item');
        statItems.forEach(item => {
            item.classList.remove('active-filter');
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
        if (this.currentFilter) {
            const activeItem = statsContainer.querySelector(`[data-filter="${this.currentFilter}"]`);
            if (activeItem) {
                activeItem.classList.add('active-filter');
            }
        }
    }

    setupEventListeners() {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        const refreshBtn = document.getElementById('refresh-btn');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', () => {
                this.loadStats();
                this.loadMessages();
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ"
        const showAllBtn = document.getElementById('show-all-btn');
        if (showAllBtn) {
            showAllBtn.addEventListener('click', () => {
                this.clearFilter();
            });
        }
    }

    startAutoRefresh() {
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            this.loadStats();
            this.loadMessages();
        }, 30000);
    }
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async function logout() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏?')) {
        try {
            const response = await fetch('/admin/logout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            if (response.ok) {
                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
                window.location.href = '/admin-login';
            } else {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ');
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-—á–∞—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
    try {
        const response = await fetch('/admin/check-auth');
        const data = await response.json();
        
        if (data.success && data.isAuthenticated) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–º–∏–Ω-—á–∞—Ç
            window.adminChat = new AdminChat();
        } else {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            window.location.href = '/admin-login';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        window.location.href = '/admin-login';
    }
});
